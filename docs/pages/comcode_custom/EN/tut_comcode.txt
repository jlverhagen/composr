[title sub="Written by Chris Graham (ocProducts)"]Composr Tutorial: Comcode and the attachment system[/title]

Comcode is the Composr 'mark-up language', available in many content spots throughout the system. This tutorial explains how to use Comcode.

[contents]decimal,lower-alpha[/contents]

[title="2"]Introduction[/title]

The main uses/advantages of Comcode are:
 - Intuitive content authoring (written just like plain text, no paragraph tags, special white-space rules, etc)
 - Tying in dynamic functionality (such as filtered content via blocks)
 - Tying in prebuilt special-effects (such as tabs or carousels)
 - Achieving basic website styling and layout
 - As a container for HTML (and other standard web technologies), for more advanced styling and layout

Many fields in Composr support Comcode, and 'Comcode pages' may be used to layout pages and panels of your site without having to do complex template editing, and without needing to use a restrictive layout configurer. The front pages and panels of Composr are, by default, Comcode pages. When we say "support Comcode", we mean you can just directly use Comcode in those fields. For example, most post/body fields for content are written in Comcode (e.g. the main body of a news article).

Unlike HTML, you do not need to use any complex syntax for Comcode -- Comcode is written more naturally, and is converted into HTML for you (combining in whatever Composr content/data is needed to make things work). Comcode adds a lot of power that HTML cannot itself provide; for example, with Comcode you can easily add an automatically-generated table of contents, or draw on the power from any of our pre-designed dynamic 'blocks' (blocks are described in our [page="_SEARCH:tut_comcode_pages"]Adding standalone pages of content (via Comcode) tutorial[/page]).

To be clear, Comcode is not a general language for designing websites. It is not in general an HTML-substitute, it is designed to work alongside it (it can embed HTML within it / mix with HTML). Your primary design would still be done using standard technologies (HTML, CSS, JavaScript). The Composr panels and front page are, by default, Comcode pages, so you can lay it out all in Comcode, but not much more than a block-block-block kind of sequential layout -- you'll drop to the level of HTML (via the Comcode [tt]semihtml[/tt] or [tt]html[/tt] tags) for fine-tuned layout.

Those familiar with forum systems may see that Comcode is similar to [concept]BBCode[/concept] in some respects.

There isn't a lot of need to directly learn Comcode, because our editor has a tag assistant to build Comcode tags for you and there's a WYSIWYG editor. Never-the-less, it doesn't hurt to know some of the tools you can use, especially if you choose to have the WYSIWYG editor disabled.

[title="2"]Simple example[/title]

Before we get into all the syntax it's best we just show a simple example of Comcode in action.

[code="Comcode"]
This is a simple document.

We could [b]make bits bold[/b].

We could:
 - write
 - a
 - list

Some actors:
1) Sean Connery
2) George Lazenby
3) Roger Moore
4) Timothy Dalton

---

Some  text   with lots of   spaces.
[/code]

As you can see, it's very close to writing plain text.

The example looks like:
[box]
This is a simple document.

We could [b]make bits bold[/b].

We could:
 - write
 - a
 - list

Some actors:
1) Sean Connery
2) George Lazenby
3) Roger Moore
4) Timothy Dalton

---

Some  text   with lots of   spaces.
[/box]

The HTML generated would be roughly like:
[code="HTML"]
This is a simple document.<br />
<br />
We could <strong>make bits bold</strong>.<br />
<br />
We could:
<ul>
	<li>write</li>
	<li>a</li>
	<li>list</li>
</ul>
<br />
Some actors:
<ol>
	<li>Sean Connery</li>
	<li>George Lazenby</li>
	<li>Roger Moore</li>
	<li>Timothy Dalton</li>
</ol>
<hr />
Some &nbsp;text &nbsp; with lots of &nbsp; spaces.
[/code]

Further examples are available within the [page="_SEARCH:userguide_comcode"]Comcode help page[/page] on any Composr site.

[title="2"]The basics[/title]

Comcode is primarily written and laid out as plain-text. Special tags (and other codes) are then interpreted with meanings:
[list="1"]
[*] [b]Emoticon[/b] codes may be used (for Conversr, these are listed in the [page="_SEARCH:tut_emoticons"]The Composr emoticon system tutorial[/page]).
[*] Comcode [b]tags[/b] may be used for [b]text formatting[/b], such as [tt][b]text[/b][/tt] to make some text bold.
[*] Comcode tags may be used to [b]embed content[/b], such as  [tt][block]main_contact_us[/block][/tt] to add a dynamic comments box.
[*] [b]Horizontal lines[/b] may be added by placing a few [tt]-[/tt]s on their own line.
[*] HTML-style [b]entities[/b] can be use to place special characters inside the text (e.g. [tt]&reg;[/tt]).
[*] [b]Member profile links[/b] can be placed by typing [tt]{{username-goes-here}}[/tt], or [tt]{{?username-goes-here}}[/tt] to show extra details when the mouse is hovered over and send a notification to the referenced member ([concept]Conversr[/concept] only). Member profile links can also be placed by typing the simpler syntax (Conversr-only, always shows the extra details), [tt]@username-goes-here[/tt]; the simpler syntax is a bit more flimsy due to the possibility for ambiguity if usernames have spaces.
[*] [b][concept]Wiki+[/concept] page links[/b] can be placed by typing [tt][[pagename-goes-here]][/tt], or [tt][[pagename-goes-here#anchor]][/tt].
[*] [b]Table[/b] syntax (described in separate section below).
[*] [b]List[/b] syntax (described in separate section below).
[*] [b][concept]Tempcode[/concept][/b] symbols and directives may be used, such as [tt]{$USERNAME}[/tt] to display the username of the current user (described in the [page="_SEARCH:tut_tempcode"]Tempcode Programming tutorial[/page]).
[*] Certain [b]shortcuts[/b] may be used, such as [tt](c)[/tt] for (c) (described in separate section).
[/list]

Additionally:
 - Hyperlinks may be written directly, and are automatically detected; these will be interpreted by the media rendering system (for example, a YouTube video hyperlink would result in the video being embedded)

[title="3"]Tag syntax[/title]

[title="4"]The tag opens and closes[/title]

Tags are written as in a way similar to HTML, except using the [tt][][/tt] brackets instead of the [tt]<>[/tt] brackets, and a slightly more user-friendly notation.

All tags have an opening tag, written [tt][tag][/tt], and a closing tag, written [tt][/tag][/tt].

If a tag is referenced that does not actually exist (e.g. [tt]I am writing some [nonsense]blah blah[/nonsense][/tt]), then it won't be read as a tag: it'll just display exactly as it was written.

[title="4"]The tag contents and wrapping[/title]

The text between the tags (the contents) is either:
[list="a"]
[*] something the tags modify -- for example, for the [tt]b[/tt] tag it is the text to make bold
[*] an otherwise critical parameter for the tags --- for example, for the [tt]block[/tt] tag it is the name of the block
[/list]

When a tag is said to 'wrap' Comcode, it essentially adds on properties. For example with:
[code="Comcode"]
[b][i]text[/i][/b]
[/code]
... the 'text' is both emboldened and italicised.

[title="4"]Tag parameters[/title]

Tags may also take other parameters in addition to the tag 'contents' (what the tag has 'embedded'). These are written in like as follows:
[tt][tag a="a-value" b="b-value"]contents[/tag][/tt], where [tt]a[/tt] and [tt]b[/tt] are merely examples of named parameters, of which a tag can have many.

Often tags have a special parameter that is of critical importance which by convention we name [tt]param[/tt]. A short-hand for writing:
[code="Comcode"]
[tag param="value"]contents[/tag]
[/code]
is only writing:
[code="Comcode"]
[tag="value"]contents[/tag]
[/code]
This only applies to the [tt]param[/tt] parameter (and only if a tag has one).

[title="4"]Escaping[/title]

If you need to include the [tt]"[/tt] symbol inside a tag parameter, you can put it in as [tt]\"[/tt] (e.g. [tt][quote="Mr \"Happy\""][/quote][/tt]).

Also, if you need to literally display a tag without it being parsed, you may type [tt]\[[/tt] for the opening bracket (e.g. [tt]\[i do not want this as italics][/tt]).

[title="3"]Table syntax[/title]

[i]If using the WYSIWYG editor you'll be unlikely to want to use this.[/i]

Table syntax is written as in the following examples...

[box="Preview" float="right"]
{| This is the table summary
! Header 1, row 1
! Header 2, row 1
|-
| Cell 1, row 1
| Cell 2, row 1
|-
| Cell 1, row 2
| Cell 2, row 2
|}
[/box]
[code="Comcode"]
{| This is the table summary
! Header 1, row 1
! Header 2, row 1
|-
| Cell 1, row 1
| Cell 2, row 1
|-
| Cell 1, row 2
| Cell 2, row 2
|}
[/code]

or in reduced form,

[box="Preview" float="right"]
{| This is the table summary
! Header 1, row 1 !! Header 2, row 1
|-
| Cell 1, row 1 || Cell 2, row 1
|-
| Cell 1, row 2 || Cell 2, row 2
|}
[/box]
[code="Comcode"]
{| This is the table summary
! Header 1, row 1 !! Header 2, row 1
|-
| Cell 1, row 1 || Cell 2, row 1
|-
| Cell 1, row 2 || Cell 2, row 2
|}
[/code]

[title="3"]List syntax[/title]

[i]If using the WYSIWYG editor you'll be unlikely to want to use this.[/i]

[media width="150" description="The example in action" float="right"]data_custom/images/docs/tut_comcode/comcode_list.png[/media]
To create a list, you just need to start typing elements of the list using the list syntax.

A line that is in the first level of a list is identified by the line starting with "[tt] - [/tt]". Subsequent lines that have the same prefix are shown as subsequent items in the same list.

If you wish to extend the list to a second level, just add the first line of the second level with two spaces before the hyphen, so that the line starts with "[tt]  - [/tt]". Of course, you should start a second level of a list somewhere within the first level. Your list may have as many levels as you like, just by adding extra spaces in the lines at a certain depth. Be careful to not jump from, for instance, a depth of 1 straight to a depth of 3, as this will result in a Comcode error.

This all sounds more complex than it is, so I will give an example to show how in fact, it is really very easy to do:
[code="Comcode"]
 - 1
 - 2
  - 2.1
   - 2.1.1
  - 2.2
 - 3
  - 3.1
[/code]

See how simple it is: the number of spaces before the hyphen identifies the list level, the hyphen identifies it is a list, and then after a space (to make it look better when writing it) comes the actual line of the list.

You can also create ordered lists...
[code="Comcode"]
Easy as:
a) a
b) bee
c) sea

Easy as:
1) one
2) two
3) three
[/code]

If you need a list element to span multiple lines, you'll need to use the Comcode [tt]list[/tt] tag instead. For example:

[surround="right"]

[box="Preview" width="35em"]
[list="1"]
[*] one
and blank line
[*] two
and blank line
[*] three
and blank line
[/list]
[/box]
[/surround]
[code="Comcode"]
[list="1"]
[*] one
and blank line
[*] two
and blank line
[*] three
and blank line
[/list]
[/code]

[title="3"]Shortcuts[/title]

There are some short-cuts for use to use...
[semihtml]
<table class="columned_table results_table autosized_table">
	<thead>
		<tr>
			<th>Shortcut</th>
			<th>Appearance</th>
		</tr>
	</thead>

	<tbody>
		<tr>
			<td>[tt](c)[/tt]</td>
			<td>(c)</td>
		</tr>
		<tr>
			<td>[tt](r)[/tt]</td>
			<td>(r)</td>
		</tr>
		<tr>
			<td>[tt](TM)[/tt]</td>
			<td>(TM)</td>
		</tr>
		<tr>
			<td>[tt]--[/tt]</td>
			<td>--</td>
		</tr>
		<tr>
			<td>[tt]---[/tt]</td>
			<td>---</td>
		</tr>
		<tr>
			<td>[tt]...[/tt]</td>
			<td>...</td>
		</tr>
		<tr>
			<td>[tt]-->[/tt]</td>
			<td>[/semihtml]-->[semihtml]</td>
		</tr>
		<tr>
			<td>[tt]<--[/tt]</td>
			<td>[/semihtml]<--[semihtml]</td>
		</tr>
	</tbody>
</table>
[/semihtml]
[title="3"]Symbols and directives[/title]

Symbols and directives from [concept]Tempcode[/concept] may also be used in Comcode.

It is rare that you will want to include these as they are primarily designed for usage from templates. However, sometimes they can be useful.

Symbols let you:
1) Insert certain individual bits of dynamic data (for example, [tt]{$USERNAME}[/tt] to get the current user's username).
2) Run some calculations (for example, [tt]{$ADD,1,2}[/tt] produces 3).

Directives let you do logic tests (for example, [tt]{+START,IF,{$IS_ADMIN}}You are admin{+END}[/tt]) and programming loops.

For a list of symbols/directives, see the [page="_SEARCH:tut_tempcode"]Tempcode Programming tutorial[/page].

[title="2"]WYSIWYG[/title]

Composr provides a [page="_SEARCH:tut_wysiwyg"]WYSIWYG[/page] editor for those who would rather not type Comcode directly. You may mix in raw Comcode tags with the normal formatted text of the WYSIWYG editor if you wish; this is necessary if you need to insert things that don't have a regular appearance, such as blocks.

Composr uses the Comcode [tt]semihtml[/tt] tag is used in order to mix HTML and Comcode. You don't see this within the editor, but it is used when saving. Any HTML is subjected to Composr's whitelist/blacklist filter when it is being parsed for final output (see the "Security" section of the [page="_SEARCH:tut_adv_comcode"]Advanced Comcode tutorial[/page]), unless the Comcode was submitted by staff in which case it would not be filtered.

[title="2"]Spacing[/title]

Comcode will create HTML that is laid out similarly to the Comcode. So, if you type two spaces between words, you'll see those two spaces. If you do 5 blank lines, you'll (roughly) see 5 blank lines.

If you are using a lot of complex code, it is nice to be able to use white-space (e.g. indentation) to lay it all out. The [tt]semihtml[/tt] tag will allow you to do this, as runs of white-space will be collapsed into a single white-space (like it is in HTML).

A small note about generated HTML:
For tags where generated-HTML would add automatic blank lines (visually speaking) after them (e.g. [tt]title[/tt]), blank lines in Comcode after them are skipped in order to allow the Comcode itself to be attractive without affecting layout.

[title="2"]Tag reference[/title]

[surround]
[media width="150" description="List of tags via the Comcode Tag Assistant" float="right"]data_custom/images/docs/tut_comcode/tags.png[/media]
[surround]
[media width="150" description="Sample form for adding a Comcode tag selected from the long list to the right" float="right"]data_custom/images/docs/tut_comcode/tag_2.png[/media]
[media width="150" description="Comcode Tag Assistant button (WYSIWYG on)" float="right"]data_custom/images/docs/tut_comcode/tag_wysiwyg.png[/media]
[media width="150" description="Comcode Tag Assistant button (WYSIWYG off)" float="right"]data_custom/images/docs/tut_comcode/tag_non_wysiwyg.png[/media]
Tags may be easily added via the "Comcode Tag Assistant" feature in Composr, which lists all tags and provides an input mechanism for each.

In addition, new tags may be created (discussed in the [page="_SEARCH:tut_adv_comcode"]Advanced Comcode tutorial[/page]).
[/surround]

[title="2"]Attachments[/title]

[media width="150" description="Editing an attachment" float="right"]data_custom/images/docs/tut_comcode/comcode_attachment_edit.png[/media]
[media width="150" description="Adding an attachment with \"Simplified attachments UI\" disabled" float="right"]data_custom/images/docs/tut_comcode/comcode_attachment_add.png[/media]
Composr has a powerful attachment system that is integrated into Comcode, with a number of content types support attachments, such as news articles and Conversr forum posts.

Attachments might be embedded images, for example, but actually just about any other kind of file.

If the "Simplified attachments UI" option is on you just click the image button above the main typing area. Otherwise there is a special attachment interface shown underneath (see screenshots).

Using attachments couldn't be easier: you just choose a file (or many files) from your computer, and Composr will automatically add an [tt]attachment[/tt] tag into the Comcode you are writing. You may then move that tag to any location you want, for placement of the actual attachment when the content is viewed.

There is special built-in support for in-line display of various media, and support of download of other types of file; any file can be added so long as the file type is in the allowed list of file types defined in the Admin Zone (see the [page="_SEARCH:tut_security"]Security tutorial[/page] for a discussion on  this).

Attachments may be given special captions, which are usually displayed as a part of the attachment box.

Images can have thumbnails automatically generated and cached.

[box="Be careful with copy & pasting"]
[media float="right" thumb="0" framed="0"]data_custom/images/docs/dont.png[/media]
You may copy and paste the attachment tag into any other area of Comcode, so as to re-use the attachment. Anyone with permission to access any of the attachment supporting content locations that the attachment is placed in will be able to view/download it. The attachment will remain in the system if the "Attachment cleanup" option is off, or until all content that using it is edited to stop using it.

If the "Attachment cleanup" option is on (by default it is off):
Be careful when placing attachment tags in a Comcode spot that does not support attachments natively. This is supported, but the attachment will be deleted if its original content is deleted, as non-native Comcode spots have no way of recording that they have used it. In addition, if a viewer does not have access to the attachment's original content, they won't have access to your copy & pasted usage to a non-native Comcode spot.
[/box]
[/surround]

[title="3"]Image media rendering[/title]

There are a number of different options for displaying attachments, so it can be a bit puzzling as to how a simple image attachment may display the image description you supply. This table will show you the defaults as defined by the [tt]MEDIA_IMAGE_WEBSAFE.tpl[/tt] template:

{|
! Thumbnail option
! Framed option
! Description within Comcode
! "Click to expand" shows
! Description within overlay
|-
| On
| Off
| Tooltip on full-screen link & Alt-text (i.e. invisible)
| No
| Yes
|-
| On
| On
| Written inside frame & Alt-text (i.e. invisible)
| Yes
| No
|-
| Off
| On
| Written inside frame & Alt-text (i.e. invisible)
| No
| N/A
|-
| Off
| Off
| Alt-text (i.e. invisible)
| No
| N/A
|}

[title="2"]oEmbed[/title]

Links posted within Comcode will be processed via a system called oEmbed to try and turn them into embeds.

For example, if you have a URL to a Google Map, the Google Map will embed automatically for you.

There are a number of configuration options that allow you to fine-tune this functionality.

[title="2"]Auto-save[/title]

If you type into a "posting form" (news posting, forum topic creation and replies, Wiki+ posting, Comcode page editing), then auto-save will be in place.
Auto-save is automatic and runs behind the scenes. As you type it will save onto the server, if it has not saved within the last 20 seconds.

Auto-save can protect you if your computer crashes, if your Internet connection is lost, etc.

You will be prompted whether to restore when going back into the content posting UI you didn't finish the save from.

Note that the auto-save assumes that you are not switching browsers, as it stores flags indicating the presence of recovery data by using cookies in the browser.

[concepts
 0_key="Mark-up language" 0_value="A language designed so that text may be laid out by surrounding special elements around portions of the text to define meta-properties (such as font)"
 1_key="Comcode"          1_value="Composr's mark-up language for the creation of formatted text and inclusion of dynamic elements"
 2_key="Attachment"       2_value="A file attached to Comcode via a 'posting page' supporting Comcode field; attachments have special support for rich media"
 3_key="Semi-HTML"        3_value="HTML and Comcode mixed freely together"
 4_key="WYSIWYG"          4_value="What-You-See-Is-What-You-Get: the name of the type of interactive editing interface used for formatting text in many programs, including modern word processors"
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_comcode_pages"]Adding standalone pages of content (via Comcode)[/page]
 - [page="_SEARCH:tut_adv_comcode"]Advanced Comcode[/page]
 - [page="_SEARCH:tut_adv_comcode_pages"]Using blocks[/page]
 - [page="_SEARCH:tut_emoticons"]The Composr emoticon system[/page]
 - [page="_SEARCH:tut_adv_comcode"]Advanced Comcode[/page]
 - [page="_SEARCH:tut_wysiwyg"]WYSIWYG editing[/page]
 - [page="_SEARCH:tut_tempcode"]Tempcode Programming[/page]
 - [page="_SEARCH:tut_security"]Security[/page]
 - [page="_SEARCH:tut_selectcode"]Filtering using Selectcode syntax[/page]
 - [page="site:userguide_comcode"]Comcode User-guide[/page]

{$SET,tutorial_tags,Content,core_rich_media,Structure and navigation,novice}{$SET,tutorial_add_date,Sep 2008}{$SET,tutorial_summary,Create dynamic effects and display rich media, without having to write any XHTML, CSS, or JavaScript.}[block]main_tutorial_rating[/block]
