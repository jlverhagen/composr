[title sub="Written by Philip Withnall (ocProducts)"]Composr Tutorial: Commandr[/title]

Commandr, the Composr Command-Line Environment, is designed for experienced system administrators who find command-lines faster to use than GUI-based alternatives.

[contents]decimal,lower-alpha[/contents]

[title="2"]Introduction[/title]

[media width="150" description="Commandr" float="right"]data_custom/images/docs/tut_commandr/commandr.png[/media]
We designed Commandr to supplement the features of the Admin Zone, rather than to replace them. The interface allows you to enter commands in the form of:
 - PHP code
 - SQL database queries
 - Commandr-code scripts
 - Commandr-code commands, which you can use to fully interact with the Composr Repository

Commandr is accessed from:
Admin Zone > Tools > Commandr
Or, as an overlay using the button in the footer if you have left that enabled (this is very handy).

[title="2"]Commands[/title]

Although the system is very flexible, there are many commands to use, designed for interaction with the Composr Repository and other systems designed specifically for Commandr. Since UNIX is the grandfather of almost all of the operating systems where command-line use is most prevalent -- and administrators comfortable with command-lines will probably be UNIX experts -- many of the commands mirror their UNIX counterparts.

The basic format for a command is as follows:
[code="Commandr"]
command_name -o -long_option -o2=value -long_option2="value 2" parameter1 "parameter 2" parameter3
[/code]
This example consists of:
 - A command name (no spaces)
 - followed by a list of options (either in short or long format; this is decided by the command in question) with optional values (quoted if they contain spaces)
 - then a list of parameter values (quoted if they contain spaces).

Commandr supports backslashing, so you can escape any quotes in values you're passing:
[code="Commandr"]
echo "Grandma said: \"Hello world!\""
[/code]

For a full list of Commandr commands, simply execute the [tt]commands[/tt] command in Commandr:
[code="Commandr"]
commands
[/code]

You can find help information about any command by simply using the command's [tt]-h[/tt] help flag, or typing [tt]help <command>[/tt].

[title="2"]PHP code[/title]

[surround]
[media thumb="0" description="Running a simple PHP command" float="right"]data_custom/images/docs/tut_commandr/php.png[/media]
PHP can be entered and executed by Commandr, simply by prefixing the code to be executed with a colon (":"). The returned data will be displayed as best as possible (its type will be determined and outputted as appropriate). Multiple PHP commands may be executed (separated by semi-colons, as per normal PHP code).
For example:
[code="Commandr"]
:echo "Hello"; echo " World.";
[/code]
[/surround]

[title="3"]Storage[/title]

[surround]
[box="Storage limit" width="25em" float="right"]
[media thumb="0" framed="0" float="right"]data_custom/images/docs/remember.png[/media]
There is a memory limit of 4Kb for variable storage, to avoid causing slow downs in requests and hitting maximum cookie size limits.
[/box]
Commandr will attempt to store:
1) variables
2) included code
3) included language files
...between command requests.

This makes it possible to execute command sequences without having to put them all on one line.

It is implemented using cookies.
[/surround]

[title="2"]SQL queries[/title]

[media width="150" description="Running an SQL query" float="right"]data_custom/images/docs/tut_commandr/query.png[/media]
SQL queries can also be executed by Commandr, simply by prefixing the query to be executed with an 'at' symbol ([tt]@[/tt]). As with PHP commands, the query results will be outputted in an appropriate manner.

Separating multiple queries using semicolons is [i]not[/i] supported.

Even though Commandr commands are single-line, pasting multi-line commands in usually works. The only exception would be if the line breaks are a part of strings within the query, in which case they would end up replaced by spaces.

You are allowed to do non-read queries, such as INSERTs and DELETEs, but you'll be told "Error: Your search yielded no results.". Ignore that, it's just a generic messages to tell you explicitly that no results were shown.

[title="2"]The filesystem[/title]

One of the main features of Commandr is the fact that various facets of Composr can be manipulated through a virtual filesystem, known as the Composr Repository (aka Commandr-fs). There are many different kinds of directory tied into the filesystem, representing different parts of the Composr system.

It is quite simple to write more as hooks if you know how to program.

To use the repository, simply navigate around using the standard UNIX filesystem commands ([tt]cd[/tt], [tt]pwd[/tt], [tt]ls[/tt], etc.), and modify files in a similar fashion to change the appropriate behind-the-scenes value.

To learn more about the filesystem, which is also used by other parts of Composr, see the [page="_SEARCH:tut_repository"]The Composr Enterprise Repository tutorial[/page].

[title="2"]Running from a normal operating system command prompt[/title]

Commandr can be loaded up directly from your operating system shell. For example, on Linux you can start it up with this command:
[code="Bash"]
php data/commandr.php
[/code]
Commandr is primarily designed for use from an HTML interface (i.e. within Composr), so things like the text file editor will not work. Most things do work though.

[title="2"]Example commands[/title]

In this section we will show you some of the quick tasks which can be performed efficiently using Commandr.

[title="3"]Quick function search[/title]

It can get quite hectic trying to find a particular function in a big application like Composr, where there are thousands of functions in use, especially if you don't have the code available on your own computer.

Fortunately you can an simply use the [tt]find_codes[/tt] command to help you. For example:
[code="Commandr"]
find_codes "function require_code("
[/code]
This example will show you what file this bit of code is in, i.e. where the [tt]require_code[/tt] function is defined.
In this case it will show [tt]sources/global.php[/tt].

[title="3"]Open page links on the go[/title]

You might often want to quickly test a newly modified page link or just any random page but that'd mean you have to open a new tab window and then manually enter the whole URL.

Commandr comes with a powerful command [tt]call[/tt] which can open up a screen for you on the go, with just a page-link as the only parameter.

For example:
[code="Commandr"]
call cms:cms_downloads:add
[/code]
This example opens up the "Add download" form.

[title="3"]Looking up members[/title]

[media width="150" description="[tt]whois[/tt] command" float="right"]data_custom/images/docs/tut_commandr/whois.png[/media]
The [tt]whois[/tt] command can be used to quickly find out a member's details such as his/her member ID, Username and IP address.
This command takes either a username, a member ID, an IP address, or an e-mail address, as the identifying information.

For example:
[code="Commandr"]
eg: whois 2
[/code]
This example looks up member ID #2.

[title="3"]Banning members[/title]

You can use the [tt]ban_member[/tt] command to ban a specific member using his/her username or ID.

For example:
[code="Commandr"]
ban_member Sam_Witwicky
[/code]

For example:
[code="Commandr"]
ban_member 4
[/code]

[title="3"]Giving points[/title]

The [tt]give[/tt] command is useful to give points to a member. The command takes 3 parameters: Member ID/Username, Number of points, and the reason for the gift points. You can also send points anonymously using the [tt]-a[/tt] flag.

For example:
[code="Commandr"]
give -a 7334 "Nice User" "I love you"
[/code]
This example anonymously gives 7334 points anonymously to a user named "Nice User", with the message "I love you".

[title="3"]Changing passwords[/title]

The [tt]passwd[/tt] command works pretty much like the native Linux command of the same name. It will help you change the password of a member using his/her username or Member ID.

For example:
[code="Commandr"]
passwd -u johnDoe newpassword
[/code]

[title="3"]Directory and table sizes[/title]

[surround]
[media width="150" description="[tt]db_table_sizes[/tt] command" float="right"]data_custom/images/docs/tut_commandr/db_table_sizes.png[/media]
[media width="150" description="[tt]directory_sizes[/tt] command" float="right"]data_custom/images/docs/tut_commandr/directory_sizes.png[/media]
The [tt]directory_sizes[/tt] command can come handy to quickly find out the size of any directory within the Composr system.
It will output a nice formatted list of all the directories for you.

The [tt]db_table_sizes[/tt] command will output a tabular list of all the database tables within Composr with their respective size.

These commands are very useful when trying to cut down on disk usage (for example, maybe you are up against a quota limit, or are finding backup files too large).
[/surround]

[title="3"]Clearing caches[/title]

Caching is important to maintain performance within Composr; however while testing new changes you might want to clear cached values.
You can use [tt]clear_cache[/tt] command to clear all the caches immediately -- or even better, only delete specific caches by passing a comma-separated list of the caches to clear.

For example:
[code="Commandr"]
clear_caches comcode_pages,templates
[/code]

Note: If parameters are not given for [tt]clear_caches[/tt] then whole cache will be cleared.

[title="3"]Opening and closing the site[/title]

[media width="150" description="Editing of config options (the closed-site options in this case)" float="right"]data_custom/images/docs/tut_commandr/closed.png[/media]
We can use Commandr and Commandr-fs to manipulate config options like files. All the files in [tt]/etc[/tt] directly correspond to config options.

With:
[code="Commandr"]
edit /etc/closed
[/code]
... we can edit the closed-site message (edit in the text box that appears to your custom message and click Proceed).

With:
[code="Commandr"]
edit /etc/site_closed
[/code]
... we can close the site (edit in the text box that appears to [tt]1[/tt] and click Proceed).

An alternative to the above is:
[code="Commandr"]
echo 1 > /etc/site_closed
[/code]
... which saves the edit directly.

[title="3"]Accessing system info using Commandr/PHP as a tunnel[/title]

[surround]
[media width="150" description="Getting cpuinfo on Linux" float="right"]data_custom/images/docs/tut_commandr/cpuinfo_linux.png[/media]
[media width="150" description="Getting cpuinfo on Mac" float="right"]data_custom/images/docs/tut_commandr/cpuinfo_mac.png[/media]
You can run almost any PHP code or function from Commandr. This can be useful for quickly testing small code snippets or functions.

This shows info about the server's CPU (Linux servers only, although a Mac-equivalent is shown in a screenshot also):
[code="Commandr"]
:echo file_get_contents('/proc/cpuinfo');
[/code]
[/surround]

[surround]
[media width="150" description="System uptime on Linux/Mac" float="right"]data_custom/images/docs/tut_commandr/uptime.png[/media]
This shows the server CPU load (Linux and Mac servers only):
[code="Commandr"]
:echo shell_exec('uptime');
[/code]

Please note that the leading [tt]:[/tt] is needed for Commandr to identify that the input's going to be something for PHP.
[/surround]

[title="2"]Commandrchat (advanced)[/title]

The final feature of Commandr is Commandrchat, which allows users of Commandr to chat with each other across the Internet. It is used via the [tt]commandrchat[/tt] command, taking a website URL and message as parameters (remember to double-quote them if they contain spaces). The system is designed to be resistant to intrusions, as each message is checked before it is displayed.

Commandrchat is designed to allow website administrators to communicate with each other and share tips, tricks and experiences with Composr.

[title="2"]Scripts (advanced)[/title]

Commands can be put together in scripts and saved for later use in the [tt]bin[/tt] filesystem. These can be executed on the Commandr command-line just by entering the name of the script, or can alternatively be scheduled for execution by the calendar to run at some point in the future (possibly routinely).

[title="2"]Bulk actions using Composr[/title]

Commandr is a very effective way to automate tedious maintenance tasks. For example, if you want to delete a set of images and you have their IDs, you could execute this Commandr code:
[code="Commandr"]
:require_code('galleries2');
$ids=array(1,2,3,4,5);
foreach ($ids as $id) delete_image($id,true);
[/code]
(paste it all in in one go, not as separate line inputs)

The code simply interfaces with the standard Composr APIs.

[title="2"]See also[/title]

 - [page="_SEARCH:tut_structure"]Composr site structure[/page]
 - [page="_SEARCH:tut_repository"]The Composr Enterprise Repository[/page]

{$SET,tutorial_tags,Power tools,Administration,commandr,expert}{$SET,tutorial_add_date,Aug 2008}{$SET,tutorial_summary,Did you know you can reconfigure half your site's systems in a few easy keystrokes? We explore this and more...}[block]main_tutorial_rating[/block]
